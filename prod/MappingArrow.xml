<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="PR447"
  covers-40="prod-MappingArrow">
  <description>Tests for the mapping arrow operator</description>

  <dependency type="feature" value="higherOrderFunctions"/>
  <dependency type="spec" value="XP40+ XQ40+"/>

  <test-case name="MappingArrow-001">
    <description>Empty sequence, function returning empty sequence</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[() =!> function($x){ }()]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>

  <test-case name="MappingArrow-002">
    <description>Integer argument, function returning empty sequence</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[1 =!> function{ }()]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>

  <test-case name="MappingArrow-003">
    <description>Empty sequence, function returning argument</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[() =!> function($x){ $x }()]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>

  <test-case name="MappingArrow-004">
    <description>Integer argument, function returning argument</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[1 =!> function{ . }()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-005">
    <description>Integer arguments, function returning argument</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[(1, 2) =!> function{ . }()]]></test>
    <result>
      <assert-deep-eq>1, 2</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-006">
    <description>Integer argument, function returning integers</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[0 =!> function{ 1, 2 }()]]></test>
    <result>
      <assert-deep-eq>1, 2</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-007">
    <description>Integer argument, function returning incremented integers</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[(0 to 5) =!> function{ . + 1 }()]]></test>
    <result>
      <assert-deep-eq>1, 2, 3, 4, 5, 6</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-008">
    <description>String argument, functions returning strings</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA['abc' =!> upper-case() =!> tokenize('\s+')]]></test>
    <result>
      <assert-string-value>ABC</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-009">
    <description>Integer arguments, functions returning numbers</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-12" change="syntax changes"/>
    <test><![CDATA[(1, 4, 9, 16, 25, 36) =!> Q{http://www.w3.org/2005/xpath-functions/math}sqrt() =!> function{ . + 1 }() => sum()]]></test>
    <result>
      <assert-eq>27</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-010">
    <description>String argument, partial function application</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[('$' =!> concat(?))('x')]]></test>
    <result>
      <assert-string-value>$x</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-011">
    <description>String argument, function returning string</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA['$' =!> concat('x')]]></test>
    <result>
      <assert-string-value>$x</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-012">
    <description>String argument, function in EQName notation</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      'xyz' =!> Q{http://www.w3.org/2005/xpath-functions}contains('x')
    ]]></test>
    <result>
      <assert-true/>
    </result>
  </test-case>

  <test-case name="MappingArrow-013">
    <description>String arguments, function in EQName notation</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      ('a', 'b') =!> (Q{http://www.w3.org/2005/xpath-functions}contains('abc', ?))()
    ]]></test>
    <result>
      <assert-deep-eq>true(), true()</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-014">
    <description>String arguments, identity function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[('no', 'yes') =!> identity()]]></test>
    <result>
      <assert-deep-eq>'no', 'yes'</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-015">
    <description>String arguments, identity functions</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[('no', 'yes') =!> identity() => identity()]]></test>
    <result>
      <assert-deep-eq>'no', 'yes'</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-016">
    <description>Strings argument, identity functions</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[('no', 'yes') => identity() =!> identity()]]></test>
    <result>
      <assert-deep-eq>'no', 'yes'</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-017">
    <description>Integer arguments, count functions</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(1 to 9) =!> count() => count()]]></test>
    <result>
      <assert-eq>9</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-018">
    <description>Integer argument, count functions</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(1 to 9) => count() =!> count()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-019">
    <description>Precedence check: comparison</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[2 > 3 =!> function{ 1 }()]]></test>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-020">
    <description>Precedence check: arithmetics</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[-1=!>function{.*.}()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>

  <!-- <test-case name="MappingArrow-021">
    <description>Precedence check: arithmetics, unary expression</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 - =!> function{ . }(2)]]></test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="MappingArrow-022">
    <description>Precedence check: arithmetics, unary expression</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1-\-=!>function{.}(2)]]></test>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  
  <test-case name="MappingArrow-023">
    <description>Precedence check: arithmetics, unary expression</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 - - =!> function{ . }(3)]]></test>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>-->

  <test-case name="MappingArrow-024">
    <description>Precedence check: unary expression</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[-5 =!> abs()]]></test>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-025">
    <description>Precedence check: unary expression</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(-6) =!> abs()]]></test>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-026">
    <description>String argument, named function references</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA['abc' =!> ((starts-with#2, ends-with#2) => head())('a')]]></test>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-027">
    <description>String argument, named function references</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA['abc' =!> ((starts-with#2, ends-with#2) => tail())('a')]]></test>
    <result>
      <assert-string-value>false</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-028">
    <description>String argument, named function reference</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(-5 to 0) =!> (abs#1)() => sum()]]></test>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-029">
    <description>Let clause, named function reference bound to variable</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      let $x := abs#1
      return (-5 to 0) =!> $x() => sum()
    ]]></test>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-030">
    <description>For clause, named function reference bound to variable</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      for $x in abs#1
      return (-5 to 0) =!> $x() => sum()
    ]]></test>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-031">
    <description>Named function reference bound to global variable</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <dependency type="spec" value="XQ40+"/>
    <test><![CDATA[
      declare variable $ABS := abs#1;
      (-5 to 0) =!> $ABS() => sum()
    ]]></test>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-032">
    <description>Array invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 =!> ([ 'A' ])()]]></test>
    <result>
      <assert-string-value>A</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-033">
    <description>Array invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 =!> (array { 'B' })()]]></test>
    <result>
      <assert-string-value>B</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-034">
    <description>Array invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(1, 2) =!> (array { 'C', 'D' })()]]></test>
    <result>
      <assert-deep-eq>'C', 'D'</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-035">
    <description>Map invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 =!> (map { 1: 'V' })()]]></test>
    <result>
      <assert-string-value>V</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-036">
    <description>Map invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(1, 2) =!> (map { 1: 'W', 2: 'X' })()]]></test>
    <result>
      <assert-deep-eq>'W', 'X'</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-037">
    <description>Map invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      let $map := map { 0: 'off', 1: 'on' }
      return 1 =!> $map()
    ]]></test>
    <result>
      <assert-string-value>on</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-038">
    <description>Array invoked as function</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(1, 2) =!> ([ 3[2], 1[0] ])()]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>

  <test-case name="MappingArrow-039">
    <description>Precedence checks: Simple map operator, numeric casts</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[256 ! 2 =!> xs:byte()]]></test>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-040">
    <description>Precedence checks: Simple map operator, numeric casts</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[(256 ! 2) =!> xs:byte()]]></test>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-041">
    <description>Precedence checks: Simple map operator, numeric casts</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[256 ! (2 =!> xs:byte())]]></test>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-042">
    <description>String operations</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      'Jemand musste Josef K. verleumdet haben.'
      => tokenize()
      =!> string-length()
      =!> function{ . + 1 }()
      => sum()
    ]]></test>
    <result>
      <assert-eq>41</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-043">
    <description>String operations</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[
      'Happy families are all alike; every unhappy family is unhappy in its own way.'
      => tokenize()
      =!> function{ upper-case(substring(., 1, 1)) || lower-case(substring(., 2)) }()
      => string-join(' ')
    ]]></test>
    <result>
      <assert-string-value>Happy Families Are All Alike; Every Unhappy Family Is Unhappy In Its Own Way.</assert-string-value>
    </result>
  </test-case>

  <test-case name="MappingArrow-044">
    <description>Error: numeric cast</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[2 ! 256 =!> xs:byte()]]></test>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-045">
    <description>Error: reserved keyword</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[1 =!> if()]]></test>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-046">
    <description>Error: unknown function in default namespace</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[0 =!> unknown()]]></test>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-047">
    <description>Error: partial function application, default namespace</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[0 =!> unknown(?)]]></test>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-048">
    <description>Error: unknown function in local function namespace</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-30" change="alternative error code for XPath"/>
    <test><![CDATA[0 =!> local:unknown()]]></test>
    <result>
      <any-of>
        <error code="XPST0017"/>
        <error code="XPST0081"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="MappingArrow-049">
    <description>Error: partial function application, local function namespace</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <modified by="Michael Kay" on="2023-06-30" change="alternative error code for XPath"/>
    <test><![CDATA[0 =!> local:unknown(?)]]></test>
    <result>
      <any-of>
        <error code="XPST0017"/>
        <error code="XPST0081"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="MappingArrow-050">
    <description>Error: EQName notation</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[0 =!> Q{}unknown()]]></test>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-051">
    <description>Error: EQName notation</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[0 =!> Q{}unknown(?)]]></test>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-052">
    <description>Error: Wrong type</description>
    <created by="Christian Gruen" on="2022-08-16"/>
    <test><![CDATA[let $_ := 0 return 0 =!> $_()]]></test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>

  <!--<test-case name="MappingArrow-101" covers-40="operator-symbols">
    <description>Arrow operator used with ceiling function, full-width symbol</description>
    <created by="Michael Kay" on="2023-06-12"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>4.54 =!＞ ceiling()</test>
    <result>
      <assert-deep-eq>5</assert-deep-eq>
    </result>
  </test-case>-->

  <test-case name="MappingArrow-102" covers-40="PR545">
    <description>Arrow operator used with inline function, no parens</description>
    <created by="Michael Kay" on="2023-06-12"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>4.54 =!> function($x){$x+1}() =!> ceiling()</test>
    <result>
      <assert-deep-eq>6</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-103" covers-40="PR545">
    <description>Arrow operator used with inline function, no parens</description>
    <created by="Michael Kay" on="2023-06-12"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>4.54 =!> function{.+1}() =!> ceiling()</test>
    <result>
      <assert-deep-eq>6</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-104" covers-40="PR545">
    <description>Arrow operator used with inline function, no parens, 'fn' abbreviation</description>
    <created by="Michael Kay" on="2023-06-12"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>4.54 =!> fn($x){$x+1}() =!> ceiling()</test>
    <result>
      <assert-deep-eq>6</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-105" covers-40="PR545">
    <description>Arrow operator used with inline function, no parens, 'fn' abbreviation</description>
    <created by="Michael Kay" on="2023-06-12"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>4.54 =!> function{.+1}() =!> ceiling()</test>
    <result>
      <assert-deep-eq>6</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-106" covers-40="PR1763">
    <description>A map may be used as a function</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>"Tu" =!> map{"Mo": "Monday", "Tu": "Tuesday"}()</test>
    <result>
      <assert-eq>"Tuesday"</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-107" covers-40="PR1763">
    <description>A map may be used as a function</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>("Mo", "Tu") =!> {"Mo": "Monday", "Tu": "Tuesday", "We": "Wednesday"}()</test>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-108" covers-40="PR1763 PR1830">
    <description>Dynamic function selected from map</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>3 =!> ({"Mo": "Monday", "Tu": fn{.+1}}("Tu"))()</test>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-109" covers-40="PR1763">
    <description>Error case (reserved name)</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>3 =!> if (true()) then abs() else round()</test>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-110" covers-40="PR1763">
    <description>Dynamic function call of a named function ref</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>(-3, 3) =!> abs#1()</test>
    <result>
      <assert-deep-eq>3, 3</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-111" covers-40="PR1763">
    <description>Dynamic function call of an array constructor</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>(3, 4) =!> [4,5,6,7]()</test>
    <result>
      <assert-deep-eq>6, 7</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-112" covers-40="PR1763">
    <description>Dynamic function call of an array constructor</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>(3, 4) =!> array{(4,5,6,7)}()</test>
    <result>
      <assert-deep-eq>6, 7</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-113" covers-40="PR1763 PR1830">
    <description>Dynamic function call of function returned by static function call</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <modified by="Gunther Rademacher" on="2025-08-27" change="allow XPST0017"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>-3 =!> function-lookup(xs:QName('fn:abs'), 1)()</test>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="MappingArrow-114" covers-40="PR1763 PR1830">
    <description>Dynamic function call of function returned by static function call</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>(-3, 3) =!> (function-lookup(xs:QName('fn:abs'), 1))()</test>
    <result>
      <assert-deep-eq>3, 3</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-115" covers-40="PR1763 PR1830">
    <description>Dynamic function call of function returned by dynamic function call</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>(3, 4, 5) => random-number-generator()?next()?permute()</test>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>

  <test-case name="MappingArrow-116" covers-40="PR1763 PR1830">
    <description>Dynamic function call of function returned by dynamic function call</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>[3, 4, 5] =!> (random-number-generator()?next()?permute)()</test>
    <result>
      <assert-deep-eq>[3,4,5]</assert-deep-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-117" covers-40="PR1763">
    <description>An array may be used as a function</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>2 =!> ["a", "b", "c"]()</test>
    <result>
      <assert-eq>"b"</assert-eq>
    </result>
  </test-case>

  <test-case name="MappingArrow-118" covers-40="PR1763">
    <description>An array may be used as a function</description>
    <created by="Michael Kay" on="2025-02-18"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <test>2 =!> array{("a", "b", "c")}()</test>
    <result>
      <assert-eq>"b"</assert-eq>
    </result>
  </test-case>

</test-set>

<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-SequenceType">
   <description>Tests for the SequenceType production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-SequenceType"/>
   <link type="spec" document="XQuery" section-number="2.5.4" idref="id-sequencetype-matching"/>

   <test-case name="sequence-type-1">
      <description> Evaluate simple sequence type using instance of and integers. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1,2,3) instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-2">
      <description> Evaluate simple sequence type using instance of and doubles. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1E3,2E3,3E3) instance of xs:double*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-3">
      <description> Evaluate simple sequence type using instance of and decimal. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1.1,3.2,4.5) instance of xs:decimal*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-4">
      <description> Evaluate simple sequence type using instance of and string. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("ab","cde","fgh") instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-5">
      <description> Evaluate simple sequence type using instance of and strings. uses "integer*" on string sequence. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("ab","cde","fgh") instance of xs:integer*</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-6">
      <description> Evaluate simple sequence type using instance of and string. uses "integer?". </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1) instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-7">
      <description> Evaluate simple sequence type using instance of and integer. uses "integer?". </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1,2) instance of xs:integer?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-8">
      <description> Evaluate simple sequence type using instance of and integer. uses "integer+". </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1,2) instance of xs:integer+</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-9">
      <description> Evaluate simple sequence type using castable and integer. uses "integer?". </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(2) castable as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-10">
      <description> Evaluate simple sequence type using castable and integer. uses "integer?" on sequence of two integers. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1,2) castable as xs:integer?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-11">
      <description> Evaluate simple sequence type using castable and double. uses "double?" on sequence of one double. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1E3) castable as xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-12">
      <description> Evaluate simple sequence type using castable and double. uses "double?" on sequence of two doubles. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1E3,2E3) castable as xs:double?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-13">
      <description> Evaluate simple sequence type using castable and decimal. uses "decimal?" on sequence of one decimal. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1.2) castable as xs:decimal?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-14">
      <description> Evaluate simple sequence type using castable and decimal. uses "decimal?" on sequence of two decimals. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(1.2,2.1) castable as xs:decimal?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-15">
      <description> Evaluate simple sequence type using castable and string. uses "string?" on sequence of one string. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("abc") castable as xs:string?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-16">
      <description> Evaluate simple sequence type using castable and string. uses "string?" on sequence of two strings. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("abc","def") castable as xs:string?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-17">
      <description> Evaluate simple sequence type using castable and integer. uses "integer?" on sequence of one string. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("abc") castable as xs:integer?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-18">
      <description> Evaluate simple sequence type using castable and integer. uses "integer?" on sequence of two strings. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>("abc","def") castable as xs:integer?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-19">
      <description> Evaluate simple sequence type using instance and boolean. uses "boolean*" on sequence of two booleans. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(fn:true(),fn:false()) instance of xs:boolean*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="sequence-type-20">
      <description> Evaluate simple sequence type using instance and boolean. uses "boolean?" on sequence of two booleans. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(fn:true(),fn:false()) instance of xs:boolean?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="sequence-type-21">
      <description> Evaluate simple sequence type using instance and boolean. uses "boolean+" on sequence of two booleans. </description>
      <created by="Carmelo Montanez" on="2006-03-29"/>
      <test>(fn:true(),fn:false()) instance of xs:boolean+</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-002" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:load-xquery-module-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'variables':{xs:QName('temp'): 0}, 
             'functions':{xs:QName('abs'): {1: fn:abs#1}}
             } 
                instance of fn:load-xquery-module-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-003" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:parsed-csv-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <modified by="Gunther Rademacher" on="2025-07-15" change="change get result type from xs:string? to xs:string"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'columns':('a','b','c'), 
             'column-index':{'a':1, 'b':2, 'c':3}, 
             'rows':(["p","q","r"], ["s", "t", "u"]), 
             'get':fn($row as xs:positiveInteger, $col as (xs:positiveInteger|xs:string)) as xs:string {"banana"}
             } instance of fn:parsed-csv-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-004" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:random-number-generator-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'number':0.937e0, 
             'next': fn() as fn:random-number-generator-record { fn:random-number-generator() }, 
             'permute': fn($in){reverse($in)} 
            } instance of fn:random-number-generator-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-005" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:schema-type-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'name':xs:QName('platonic'), 
             'is-simple':true(),
             'base-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'primitive-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'variety':'atomic' cast as enum('atomic'),
             'members':fn() as fn:schema-type-record* {()},
             'simple-content-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'matches':fn($x as xs:anyAtomicType) as xs:boolean {true()},
             'constructor':xs:integer#1
             } instance of fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-006" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:uri-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'uri':'http://www.w3.org/example.xml', 
             'scheme':'http',
             'absolute':true(),
             'hierarchical':true(),
             'authority':'',
             'userinfo':(),
             'host':'www.w3.org',
             'port':8080,
             'path':'example.xml',
             'query':(),
             'fragment':(),
             'path-segments':(),
             'query-parameters':{},
             'filepath':()
             } instance of fn:uri-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-102" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:load-xquery-module-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <module uri="http://www.w3.org/fots/fn/load-xquery-module/valid/module"
         file="../fn/load-xquery-module/valid-module.xqm"/>
      <test>load-xquery-module("http://www.w3.org/fots/fn/load-xquery-module/valid/module")
                   instance of fn:load-xquery-module-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-103" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:parsed-csv-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv("a,b,c") instance of fn:parsed-csv-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-104" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:random-number-generator-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>fn:random-number-generator(0.5) instance of fn:random-number-generator-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-105" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:schema-type-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>atomic-type-annotation(23) instance of fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-106" covers-40="PR1991">
      <description> Test existence of built-in-record type fn:uri-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-uri("http://example.com/") instance of fn:uri-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-202" covers-40="PR1991">
      <description> fn:load-xquery-module-record is not extensible </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'variables':{xs:QName('temp'): 0}, 
             'functions':{xs:QName('abs'): {1: fn:abs#1}},
             'extra':42
             } 
                instance of fn:load-xquery-module-record</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-203" covers-40="PR1991">
      <description> fn:parsed-csv-structure-record is not extensible. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'columns':('a','b','c'), 
             'column-index':{'a':1, 'b':2, 'c':3}, 
             'rows':(["p","q","r"], ["s", "t", "u"]), 
             'get':fn($row as xs:positiveInteger, $col as (xs:positiveInteger|xs:string)) as xs:string? {"banana"},
             'extra':42
             } instance of fn:parsed-csv-structure-record</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-204" covers-40="PR1991">
      <description> fn:random-number-generator-record is extensible. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'number':0.937e0, 
             'next': fn() as fn:random-number-generator-record { fn:random-number-generator() }, 
             'permute': fn($in){reverse($in)},
             'extra': 42
            } instance of fn:random-number-generator-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-205" covers-40="PR1991">
      <description> fn:schema-type-record is extensible. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'name':xs:QName('platonic'), 
             'is-simple':true(),
             'base-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'primitive-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'variety':'atomic' cast as enum('atomic'),
             'members':fn() as fn:schema-type-record* {()},
             'simple-content-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'matches':fn($x as xs:anyAtomicType) as xs:boolean {true()},
             'constructor':xs:integer#1,
             'extra':42
             } instance of fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-206" covers-40="PR1991">
      <description> fn:uri-structure-record is extensible. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'uri':'http://www.w3.org/example.xml', 
             'scheme':'http',
             'absolute':true(),
             'hierarchical':true(),
             'authority':'',
             'userinfo':(),
             'host':'www.w3.org',
             'port':8080,
             'path':'example.xml',
             'query':(),
             'fragment':(),
             'path-segments':(),
             'query-parameters':{},
             'filepath':(),
             'extra':42
             } instance of fn:uri-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="built-in-record-type-302" covers-40="PR1991">
      <description> Invalid instance of built-in-record type fn:load-xquery-module-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'variables':{xs:QName('temp'): 0}, 
             'functions':{xs:QName('abs'): fn:abs#1} (: wrong, value must be a map :)
             } 
                instance of fn:load-xquery-module-record</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-303" covers-40="PR1991">
      <description> Invalid instance of built-in-record type fn:parsed-csv-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'columns':('a','b','c'), 
             'column-index':{'a':1, 'b':2, 'c':3}, 
             'rows':(["p","q","r"], ["s", "t", "u"]), 
             'get':fn($row as xs:positiveInteger, $col as (xs:positiveInteger|xs:string)) as xs:anyAtomicType? {"banana"}
                    (: wrong, must have correct return type :)
             } instance of fn:parsed-csv-structure-record</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-304" covers-40="PR1991">
      <description> Invalid instance of built-in-record type fn:random-number-generator-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'number':0.937e0, 
             'next': fn() { fn:random-number-generator() }, (:wrong, must have correct return type :)
             'permute': fn($in){reverse($in)} 
            } instance of fn:random-number-generator-record</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-305" covers-40="PR1991">
      <description> Invalid instance of built-in-record type fn:schema-type-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <modified by="Gunther Rademacher" on="2025-10-21" change="flip result to true, because 'atomic' is a valid enum instance since #2154"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'name':xs:QName('platonic'), 
             'is-simple':true(),
             'base-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'primitive-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'variety':'atomic',
             'members':fn() as fn:schema-type-record* {()},
             'simple-content-type':fn() as fn:schema-type-record {atomic-type-annotation(3)},
             'matches':fn($x as xs:anyAtomicType) as xs:boolean {true()},
             'constructor':xs:integer#1
             } instance of fn:schema-type-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="built-in-record-type-306" covers-40="PR1991">
      <description> Invalid instance of built-in-record type fn:uri-structure-record. </description>
      <created by="Michael Kay" on="2025-05-29"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>{'uri':'http://www.w3.org/example.xml', 
             'scheme':'http',
             'absolute':true(),
             'hierarchical':true(),
             'authority':'',
             'userinfo':(),
             'host':'www.w3.org',
             'port':8080,
             'path':'example.xml',
             'query':(),
             'fragment':(),
             'path-segments':(),
             'query-parameters':{},
             'filepath':()
             } instance of fn:uri-structure-record</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

</test-set>

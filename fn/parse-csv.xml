<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-parse-csv" covers-40="PR1066">
  <description>Tests for the fn:parse-csv function</description>
  <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-parse-csv"/>
  <dependency type="spec" value="XP40+ XQ40+"/>

  
  <test-case name="parse-csv-001">
    <description>Empty sequence</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <modified by="Gunther Rademacher" on="2025-08-13" change="now expecting an empty sequence"/>
    <test><![CDATA[fn:parse-csv(())]]></test>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-002">
    <description>Empty string</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("")</test>
    <result>
      <all-of>
        <assert>empty(?columns)</assert>
        <assert>deep-equal(?column-index, map{})</assert>
        <assert>empty(?rows)</assert>
      </all-of>     
    </result>
  </test-case>
  
  <test-case name="parse-csv-003">
    <description>Single row, single column</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
                  map{"columns":(), 
                      "column-index": map{}, 
                      "rows":(["one"])})</assert>
        <assert>?get(1,1) = "one"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-004">
    <description>Single row, two columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
              "column-index": map{}, 
              "rows":(["one","two"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-005">
    <description>Two rows, two columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||"three,four")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
              "column-index": map{}, 
              "rows":(["one","two"],["three","four"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three"</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-006">
    <description>Two rows, two columns; extra newline at end</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||"three,four"||char(10))</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],["three","four"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three"</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-007">
    <description>Two rows, ragged columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||"three,four,five")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],["three","four","five"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three"</assert>
        <assert>?get(2,2) = "four"</assert>
        <assert>?get(2,3) = "five"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-008">
    <description>Blank line</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||char(10)||"three,four")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],[],["three","four"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(3,1) = "three"</assert>
        <assert>?get(3,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-009">
    <description>Quoted field</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||'"three,four",five')</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],["three,four","five"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three,four"</assert>
        <assert>?get(2,2) = "five"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-010">
    <description>Quoted field with escaped quotes</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(10)||'"three,""four""",five')</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],[`three,"four"`,"five"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = 'three,"four"'</assert>
        <assert>?get(2,2) = "five"</assert>
      </all-of>
    </result>
  </test-case>
  
  <!--<test-case name="parse-csv-011">
    <description>CRLF delimiter</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(13)||char(10)||"three,four")</test>
    <result>
      <assert-xml><![CDATA[<csv xmlns="http://www.w3.org/2005/xpath-functions"
          ><rows><row><field>one</field><field>two</field></row
          ><row><field>three</field><field>four</field></row></rows></csv>]]></assert-xml>
    </result>
  </test-case>-->
  
  <!--<test-case name="parse-csv-012">
    <description>CR delimiter</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two"||char(13)||"three,four"||char(13))</test>
    <result>
      <assert-xml><![CDATA[<csv xmlns="http://www.w3.org/2005/xpath-functions"
          ><rows><row><field>one</field><field>two</field></row
          ><row><field>three</field><field>four</field></row></rows></csv>]]></assert-xml>
    </result>
  </test-case>-->
  
  <test-case name="parse-csv-013">
    <description>Empty fields</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,"||char(10)||",four"||char(10)||","||char(10)||",,,")</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one",""],["","four"],["",""],["","","",""])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = ""</assert>
        <assert>?get(2,1) = ""</assert>
        <assert>?get(2,2) = "four"</assert>
        <assert>?get(3,1)||?get(3,2) = ""</assert>
        <assert>?get(4,1)||?get(4,2)||?get(4,3)||?get(4,4) = ""</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-014">
    <description>Empty quoted fields</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,""'||char(10)||'"","four"')</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one",""],["","four"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = ""</assert>
        <assert>?get(2,1) = ""</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-015">
    <description>Newline in quoted field</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,"['||char(10)||']"'||char(10)||'"","four"')</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one",`[{char(10)}]`],["","four"])})</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = `[{char(10)}]`</assert>
        <assert>?get(2,1) = ""</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-020">
    <description>Field delimiter semicolon</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one;two"||char(10)||"three;four", map{'field-delimiter':';'})</test>
    <result>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":(), 
          "column-index": map{}, 
          "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-021">
    <description>Row delimiter vertical bar</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", map{'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-022">
    <description>Reset both delimiters</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one.two|three.four", map{'row-delimiter':'|','field-delimiter':'.'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <!--<test-case name="parse-csv-023">
    <description>Alternative row delimiters</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one.two|three.four"||char(10)||"five.six", 
                           map{'row-delimiter':('|',char(10)),'field-delimiter':'.'})</test>
    <result>
      <assert-xml><![CDATA[<csv xmlns="http://www.w3.org/2005/xpath-functions"
          ><rows><row><field>one</field><field>two</field></row
          ><row><field>three</field><field>four</field></row
          ><row><field>five</field><field>six</field></row></rows></csv>]]></assert-xml>
    </result>
  </test-case>-->
  
  <test-case name="parse-csv-024">
    <description>Single quotes</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,'two,2'|three,'four,4'", 
      map{'row-delimiter':'|','quote-character':"'"})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two,2"],["three","four,4"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-025">
    <description>Single quotes, escaped</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,'two,''2'''|three,'four,''4'''", 
      map{'row-delimiter':'|','quote-character':"'"})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two,'2'"],["three","four,'4'"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-026">
    <description>Whitespace not trimmed</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one ,two | three, four", 
      map{'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one ","two "],[" three"," four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-027">
    <description>Whitespace explicitly not trimmed</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one ,two | three, four", 
      map{'row-delimiter':'|', 'trim-whitespace':false()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one ","two "],[" three"," four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-028">
    <description>Whitespace trimmed</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one ,two | three, twenty  four ", 
      map{'row-delimiter':'|', 'trim-whitespace':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two"],["three","twenty  four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-029">
    <description>Single row delimiter</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(char(10))]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-030">
    <description>Single row delimiter with significant whitespace</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(" " || char(10))]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([" "])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-031">
    <description>Single row delimiter with significant whitespace</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(char(10) || " ")]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([], [" "])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-032">
    <description>Single row delimiter with significant whitespace</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(" " || char(10), map{'trim-whitespace':true()})]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-033">
    <description>Single row delimiter with significant whitespace</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(char(10) || " ", map{'trim-whitespace':true()})]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-034">
    <description>Multiple blank rows</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(char(10) || char(10), map{'trim-whitespace':true()})]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([],[])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-035">
    <description>Multiple blank rows</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test><![CDATA[fn:parse-csv(char(10) || char(10) || char(10), map{'trim-whitespace':true()})]]></test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":([], [], [])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-040">
    <description>header:true</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("left,right|one,two|three,four", 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":("left","right"), 
              "column-index": map{"left":1, "right":2}, 
              "rows":(["one","two"],["three","four"])})</assert>
        <assert>?get(1,"left") = "one"</assert>
        <assert>?get(1,"right") = "two"</assert>
        <assert>?get(2,"left") = "three"</assert>
        <assert>?get(2,"right") = "four"</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three"</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-041">
    <description>header:explicit</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'header':('left','right')})</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":("left","right"), 
          "column-index": map{"left":1, "right":2}, 
          "rows":(["one","two"],["three","four"])})</assert>
        <assert>?get(1,"left") = "one"</assert>
        <assert>?get(1,"right") = "two"</assert>
        <assert>?get(2,"left") = "three"</assert>
        <assert>?get(2,"right") = "four"</assert>
        <assert>?get(1,1) = "one"</assert>
        <assert>?get(1,2) = "two"</assert>
        <assert>?get(2,1) = "three"</assert>
        <assert>?get(2,2) = "four"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-042">
    <description>header:false</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'header':false()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-043">
    <description>header:explicit but incomplete</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'header':("left")})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("left"), 
        "column-index": map{"left":1}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-044">
    <description>column-names:explicit but incomplete</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'header':('','right')})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("","right"), 
        "column-index": map{"right":2}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <!--<test-case name="parse-csv-045">
    <description>column-names:explicit but incomplete</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'column-names':map{}})</test>
    <result>
      <assert-xml><![CDATA[<csv xmlns="http://www.w3.org/2005/xpath-functions"
          ><columns><column/><column/></columns
          ><rows><row><field>one</field><field>two</field></row
          ><row><field>three</field><field>four</field></row
          ></rows></csv>]]></assert-xml>
    </result>
  </test-case>-->
  
  <test-case name="parse-csv-046">
    <description>header:true, with duplicates</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("left,left|one,two|three,four", 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("left","left"), 
        "column-index": map{"left":1}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-047">
    <description>header:true, with gaps</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv(",right|one,two|three,four", 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("","right"), 
        "column-index": map{"right":2}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-048">
    <description>header:true, with gaps</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv(",|one,two|three,four", 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("",""), 
        "column-index": map{}, 
        "rows":(["one","two"],["three","four"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-049">
    <description>Header only, no rows</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("left,right", 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <all-of>
        <assert>deep-equal($result => map:remove("get"), 
          map{"columns":("left","right"), 
          "column-index": map{"left":1, "right":2}, 
          "rows":()})</assert>
        <assert>?get(1,"left") = ""</assert>
        <assert>?get(1,"right") = ""</assert>
        <assert>?get(2,"left") = ""</assert>
        <assert>?get(2,"right") = ""</assert>
        <assert>?get(1,1) = ""</assert>
        <assert>?get(1,2) = ""</assert>
        <assert>?get(2,1) = ""</assert>
        <assert>?get(2,2) = ""</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-060">
    <description>number-of-columns option</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4,5,6,7,8,9,10|11,12,13,14,15,16,17,18,19,20", 
      map{'row-delimiter':'|', 'select-columns':1 to 4})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","2","3","4"],["11","12","13","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-061">
    <description>number-of-columns option, header:true</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("a,b,c,d,e,f,g,h,i|1,2,3,4,5,6,7,8,9,10|11,12,13,14,15,16,17,18,19,20", 
      map{'row-delimiter':'|', 'select-columns':1 to 4, 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("a","b","c","d"), 
        "column-index": map{"a":1, "b":2, "c":3, "d":4}, 
        "rows":(["1","2","3","4"],["11","12","13","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-062">
    <description>trim-rows:true, header:false</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14,15,16,17,18,19,20", 
      map{'row-delimiter':'|', 'trim-rows':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","2","3","4"],["11","12","13","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-063">
    <description>trim-rows:true, header:true</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("a,b,c,d|1,2,3,4,5,6,7,8,9,10|11,12,13,14,15,16,17,18,19,20", 
      map{'row-delimiter':'|', 'trim-rows':true(), 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("a","b","c","d"), 
        "column-index": map{"a":1, "b":2, "c":3, "d":4}, 
        "rows":(["1","2","3","4"],["11","12","13","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-064">
    <description>trim-rows:false, header:false</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14,15,16", 
      map{'row-delimiter':'|', 'trim-rows':false(), 'header':false()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","2","3","4"],["11","12","13","14","15","16"])})</assert>
    </result>
  </test-case>
   
   <test-case name="parse-csv-065">
     <description>number-of-columns option causes row padding</description>
     <created by="Michael Kay" on="2024-03-14"/>
     <test>fn:parse-csv("1,2,3,4,5,6|14,15,16", 
       map{'row-delimiter':'|', 'select-columns':1 to 4})</test>
     <result>
       <assert>deep-equal($result => map:remove("get"), 
         map{"columns":(), 
         "column-index": map{}, 
         "rows":(["1","2","3","4"],["14","15","16",""])})</assert>
     </result>
   </test-case>
   
   <test-case name="parse-csv-066">
     <description>trim-rows option causes row padding</description>
     <created by="Michael Kay" on="2024-03-14"/>
     <test>fn:parse-csv("1,2,3,4,5,6|14,15,16", 
       map{'row-delimiter':'|', 'trim-rows':true()})</test>
     <result>
       <assert>deep-equal($result => map:remove("get"), 
         map{"columns":(), 
         "column-index": map{}, 
         "rows":(["1","2","3","4","5","6"],["14","15","16","","",""])})</assert>
     </result>
   </test-case>
   
   <test-case name="parse-csv-067">
     <description>trim-rows option with header causes row padding</description>
     <created by="Michael Kay" on="2024-03-14"/>
     <test>fn:parse-csv("a,b,c,d,e|1,2,3|14,15,16", 
       map{'row-delimiter':'|', 'trim-rows':true(), 'header':true()})</test>
     <result>
       <assert>deep-equal($result => map:remove("get"), 
         map{"columns":("a","b","c","d","e"), 
         "column-index": map{"a":1,"b":2,"c":3,"d":4,"e":5}, 
         "rows":(["1","2","3","",""],["14","15","16","",""])})</assert>
     </result>
   </test-case>
  
  <test-case name="parse-csv-080">
    <description>select-columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14", 
      map{'select-columns':(4,3,2,1), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["4","3","2","1"],["14","13","12","11"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-081">
    <description>select-columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14", 
              map{'select-columns':(1,4), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","4"],["11","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-082">
    <description>select-columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14", 
              map{'select-columns':(1,4,17), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","4",""],["11","14",""])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-083">
    <description>select-columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14", 
              map{'select-columns':(1,17,4), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","","4"],["11","","14"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-084">
    <description>select-columns</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("1,2,3,4|11,12,13,14,15", 
              map{'select-columns':(1,4,5), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(), 
        "column-index": map{}, 
        "rows":(["1","4",""],["11","14","15"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-086">
    <description>select-columns, header:true</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv("first,second,third,fourth|1,2,3,4|11,12,13,14", 
      map{'select-columns':(1,4,3), 'header':true(), 'row-delimiter':'|'})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("first","fourth","third"), 
        "column-index": map{"first":1,"fourth":2,"third":3}, 
        "rows":(["1","4","3"],["11","14","13"])})</assert>
    </result>
  </test-case>
   
   <test-case name="parse-csv-100">
     <description>
       Array behaviour.
     </description>
     <created by="Michael Kay" on="2024-03-11"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':1 to 3})?rows 
       => array:join()</test>
     <result>
       <assert-deep-eq>["a","b","c","p","q","r"]</assert-deep-eq>
     </result>
   </test-case>
   
   <test-case name="parse-csv-101">
     <description>
       Array behaviour.
     </description>
     <created by="Michael Kay" on="2024-03-11"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':2 to 4})?rows 
       => array:join()</test>
     <result>
       <assert-deep-eq>["b","c","d","q","r","s"]</assert-deep-eq>
     </result>
   </test-case>
   
   <test-case name="parse-csv-102">
     <description>
       Array behaviour.
     </description>
     <created by="Michael Kay" on="2024-03-11"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':(4,3,2)})?rows 
       => array:join()</test>
     <result>
       <assert-deep-eq>["d","c","b","s","r","q"]</assert-deep-eq>
     </result>
   </test-case> 

  <test-case name="parse-csv-103">
    <description>Extracted headers are always trimmed</description>
    <created by="Gunther Rademacher" on="2025-01-03"/>
    <test>fn:parse-csv(' one,two ," three","four "| 1,2 , 3,4 ', 
      map{'row-delimiter':'|', 'header':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("one","two","three","four"), 
        "column-index": map{"one":1, "two":2, "three": 3, "four": 4}, 
        "rows":[" 1","2 "," 3","4 "]})</assert>
    </result>
  </test-case>

  <test-case name="parse-csv-104">
    <description>Extracted headers are trimmed even when trim-whitespace is false</description>
    <created by="Gunther Rademacher" on="2025-01-03"/>
    <test>fn:parse-csv(' one,two ," three","four "| 1,2 , 3,4 ', 
      map{'row-delimiter':'|', 'header':true(), 'trim-whitespace':false()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("one","two","three","four"), 
        "column-index": map{"one":1, "two":2, "three": 3, "four": 4}, 
        "rows":[" 1","2 "," 3","4 "]})</assert>
    </result>
  </test-case>

  <test-case name="parse-csv-105">
    <description>Explicit headers are not trimmed even when trim-whitespace is true</description>
    <created by="Gunther Rademacher" on="2025-01-03"/>
    <test>fn:parse-csv(' one,two ," three","four "| 1,2 , 3,4 ', 
      map{'row-delimiter':'|', 'header':(' first', 'second ', ' third', 'fourth '), 'trim-whitespace':true()})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":(" first","second ", " third", "fourth "), 
        "column-index": map{" first":1, "second ":2, " third":3, "fourth ":4}, 
        "rows":(["one","two","three","four"], ["1", "2", "3", "4"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-106">
    <description>CRLF as row delimiter</description>
    <created by="Michael Kay" on="2025-01-15"/>
    <test>fn:parse-csv('one,two,three,four'||char(13)||char(10)||'1,2,3,4', 
      map{'header':('first', 'second', 'third', 'fourth')})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("first","second","third","fourth"), 
        "column-index": map{"first":1, "second":2, "third":3, "fourth":4}, 
        "rows":(["one","two","three","four"], ["1", "2", "3", "4"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-107">
    <description>CR as row delimiter</description>
    <created by="Michael Kay" on="2025-01-15"/>
    <test>fn:parse-csv('one,two,three,four'||char(13)||'1,2,3,4', 
      map{'header':('first', 'second', 'third', 'fourth')})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("first","second","third","fourth"), 
        "column-index": map{"first":1, "second":2, "third":3, "fourth":4}, 
        "rows":(["one","two","three","four"], ["1", "2", "3", "4"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-108">
    <description>CRLF within quoted field</description>
    <created by="Michael Kay" on="2025-01-15"/>
    <test>fn:parse-csv('one,two,three,four'||char(13)||char(10)||'11,"2'||char(13)||char(10)||'2",33,44', 
      map{'header':('first', 'second', 'third', 'fourth')})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("first","second","third","fourth"), 
        "column-index": map{"first":1, "second":2, "third":3, "fourth":4}, 
        "rows":(["one","two","three","four"], ["11", "2"||char(10)||"2", "33", "44"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-109">
    <description>CR within quoted field</description>
    <created by="Michael Kay" on="2025-01-15"/>
    <test>fn:parse-csv('one,two,three,four'||char(13)||'11,"2'||char(13)||'2",33,44', 
      map{'header':('first', 'second', 'third', 'fourth')})</test>
    <result>
      <assert>deep-equal($result => map:remove("get"), 
        map{"columns":("first","second","third","fourth"), 
        "column-index": map{"first":1, "second":2, "third":3, "fourth":4}, 
        "rows":(["one","two","three","four"], ["11", "2"||char(10)||"2", "33", "44"])})</assert>
    </result>
  </test-case>
  
  <test-case name="parse-csv-200" covers-40="PR2013">
    <description>Base64Binary input (placeholder test)</description>
    <created by="Michael Kay" on="2025-09-09"/>
    <test>fn:parse-csv(xs:base64Binary(''))</test>
    <result>
      <assert-false/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-201" covers-40="PR2013">
    <description>HexBinary input (placeholder test)</description>
    <created by="Michael Kay" on="2025-09-09"/>
    <test>fn:parse-csv(xs:hexBinary(''))</test>
    <result>
      <assert-false/>
    </result>
  </test-case>


  <test-case name="parse-csv-901">
    <description>Unclosed quotes</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two,"three')</test>
    <result>
      <error code="FOCV0001"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-902">
    <description>Quotes in mid-field</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two"three"')</test>
    <result>
      <error code="FOCV0001"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-903">
    <description>Quotes in mid-field</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,"two"three')</test>
    <result>
      <error code="FOCV0001"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-904">
    <description>Field delimiter not a single char</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'field-delimiter':'::'})</test>
    <result>
      <error code="FOCV0002"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-905">
    <description>Field delimiter not a single char</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'field-delimiter':''})</test>
    <result>
      <error code="FOCV0002"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-906">
    <description>Row delimiter not a single char</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'row-delimiter':'||'})</test>
    <result>
      <error code="FOCV0002"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-907">
    <description>Row delimiter not a single string</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <modified by="Gunther Rademacher" on="2025-08-13" change="added alternate error code FOCV0002"/>
    <test>fn:parse-csv('one,two', map{'row-delimiter':('|','||')})</test>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOCV0002"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-908">
    <description>Same delimiter in multiple roles</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'row-delimiter':','})</test>
    <result>
      <error code="FOCV0003"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-909">
    <description>Same delimiter in multiple roles</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'field-delimiter':char(10)})</test>
    <result>
      <error code="FOCV0003"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-910">
    <description>Same delimiter in multiple roles</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'field-delimiter':'"'})</test>
    <result>
      <error code="FOCV0003"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-911">
    <description>Same delimiter in multiple roles</description>
    <created by="Michael Kay" on="2024-03-07"/>
    <test>fn:parse-csv('one,two', map{'field-delimiter':';', 'row-delimiter':';'})</test>
    <result>
      <error code="FOCV0003"/>
    </result>
  </test-case>
   
  <test-case name="parse-csv-912">
     <description>Negative column numbers</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
           'select-columns':(4,3,-1)})?rows 
       => array:join()</test>
     <result>
       <error code="XPTY0004"/>
     </result>
  </test-case>
   
   <test-case name="parse-csv-913">
     <description>Zero column numbers</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':(4,3,0)})?rows 
       => array:join()</test>
     <result>
       <error code="XPTY0004"/>
     </result>
   </test-case>
   
   <test-case name="parse-csv-914">
     <description>Negative row number passed to get() function</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <modified by="Christian Gruen" on="2025-03-31" change="errors: more flexibility"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
           'select-columns':(4,3,1)})?get(-1, 2)</test>
     <result>
       <any-of>
         <error code="XPTY0004"/>
         <error code="FORG0001"/>
       </any-of>
     </result>
   </test-case>
   
   <test-case name="parse-csv-915">
     <description>Zero row number passed to get() function</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <modified by="Christian Gruen" on="2025-03-31" change="errors: more flexibility"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':(4,3,1)})?get(0, 2)</test>
     <result>
       <any-of>
         <error code="XPTY0004"/>
         <error code="FORG0001"/>
       </any-of>
     </result>
   </test-case>
   
   <test-case name="parse-csv-916">
     <description>Negative column number passed to get() function</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <modified by="Christian Gruen" on="2025-03-31" change="errors: more flexibility"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':(4,3,1)})?get(2, -1)</test>
     <result>
       <any-of>
         <error code="XPTY0004"/>
         <error code="FORG0001"/>
       </any-of>
     </result>
   </test-case>
   
   <test-case name="parse-csv-917">
     <description>Zero column number passed to get() function</description>
     <created by="Michael Kay" on="2024-03-11"/>
     <modified by="Christian Gruen" on="2025-03-31" change="errors: more flexibility"/>
     <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
       map{'row-delimiter':'|',
       'select-columns':(4,3,1)})?get(2, 0)</test>
     <result>
       <any-of>
         <error code="XPTY0004"/>
         <error code="FORG0001"/>
       </any-of>
     </result>
   </test-case>
  
  <test-case name="parse-csv-918">
    <description>get(): no such field</description>
    <created by="Michael Kay" on="2024-05-11"/>
    <test>fn:parse-csv("left,right|one,two|three,four", 
      map{'row-delimiter':'|', 'header':true()})?get(1, "middle")</test>
    <result>
      <error code="FOCV0004"/>
    </result>
  </test-case>
  
  <test-case name="parse-csv-919">
    <description>Negative row number passed to get() function</description>
    <created by="Michael Kay" on="2024-05-11"/>
    <modified by="Christian Gruen" on="2025-03-31" change="errors: more flexibility"/>
    <test>parse-csv("a,b,c,d,e,f|p,q,r,s,t,u", 
      map{'row-delimiter':'|',
      'select-columns':(4,3,1)})?get(-1, 3)</test>
    <result>
       <any-of>
         <error code="XPTY0004"/>
         <error code="FORG0001"/>
       </any-of>
    </result>
  </test-case>
  
  <test-case name="parse-csv-920">
    <description>header: mistyped as 'column-names' (as per original spec)</description>
    <created by="Michael Kay" on="2024-08-28"/>
    <test>fn:parse-csv("one,two|three,four", 
      map{'row-delimiter':'|', 'column-names':('left','right')})
    </test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>

   <test-case name="fn-parse-csv-binary-001" covers-40="PR2013">
      <description>Binary input without BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('41'))?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-002" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('EFBBBF41'))?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-003" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FEFF0041'))?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-004" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FFFE4100'))?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-005" covers-40="PR2013">
      <description>Binary input with invalid BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FFFF41'))?rows?1</test>
      <result>
         <error code="FOUT1200"/>
      </result>
   </test-case>

   <test-case name="fn-parse-csv-binary-011" covers-40="PR2013">
      <description>Binary input without BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('41')[year-from-date(current-date()) > 1000])?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-012" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('EFBBBF41')[year-from-date(current-date()) > 1000])?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-013" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FEFF0041')[year-from-date(current-date()) > 1000])?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-014" covers-40="PR2013">
      <description>Binary input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FFFE4100')[year-from-date(current-date()) > 1000])?rows?1</test>
      <result>
         <assert-string-value>A</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-015" covers-40="PR2013">
      <description>Binary input with invalid BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(xs:hexBinary('FFFF41')[year-from-date(current-date()) > 1000])?rows?1</test>
      <result>
         <error code="FOUT1200"/>
      </result>
   </test-case>
  
   <test-case name="fn-parse-csv-binary-021" covers-40="PR2013">
      <description>Binary file input</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(unparsed-binary('parse-csv/bom-none.csv'))?rows?1</test>
      <result>
         <assert-string-value>𱁬</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-022" covers-40="PR2013">
      <description>Binary file input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(unparsed-binary('parse-csv/bom-utf8.csv'))?rows?1</test>
      <result>
         <assert-string-value>𱁬</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-023" covers-40="PR2013">
      <description>Binary file input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(unparsed-binary('parse-csv/bom-utf16le.csv'))?rows?1</test>
      <result>
         <assert-string-value>𱁬</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-024" covers-40="PR2013">
      <description>Binary file input with BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(unparsed-binary('parse-csv/bom-utf16be.csv'))?rows?1</test>
      <result>
         <assert-string-value>𱁬</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-parse-csv-binary-025" covers-40="PR2013">
      <description>Binary file input with invalid BOM</description>
      <created by="Christian Gruen" on="2025-10-02"/>        
      <environment name="empty"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>parse-csv(unparsed-binary('parse-csv/bom-invalid.csv'))?rows?1</test>
      <result>
         <error code="FOUT1200"/>
      </result>
   </test-case>

</test-set>

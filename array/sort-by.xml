<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="array-sort-by"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" covers-40="PR2001 PR2062">
    <description>Tests for the array:sort-by-by function introduced in XPath 4.0</description>
    <dependency type="spec" value="XP40+ XQ40+"/>
    
    <environment name="array-with-collation">
        <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
        <collation uri="http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"/>
    </environment>
    
    <test-case name="array-sort-by-001">
        <description>Apply sort function to array with number members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <test>array:sort-by([1, 4, 6, 5, 3], ())</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[1, 3, 4, 5, 6]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>     
    <test-case name="array-sort-by-002">
        <description>Apply sort function to array with number members, sort by fn:abs</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <test>array:sort-by([1, -2, 5, 10, -10, 10, 8], {'key':fn:abs#1})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[1, -2, 5, 8, 10, -10, 10]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-by-003">
        <description>Apply sort function to array with sequence members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort-by([(1,0), (1,1), (0,1), (0,0)], ())</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[(0,0), (0,1), (1,0), (1,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>     
    <test-case name="array-sort-by-004">
        <description>Apply sort function to array with sequence members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <environment ref="array"/>
        <test>array:sort-by([(1,0), (1,1), (0,1), (0,0), (), (1), (0,0,1)], ())</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[(), (0,0), (0,0,1), (0,1), (1), (1,0), (1,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-005">
        <description>Apply sort function to array with sequence members, sort by fn:count</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <modified by="Michael Kay" on="2016-07-26" change="add collation argument, bug 29722"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort-by([(1,0), (1,1), (0,1), (0,0), (), (1), (0,0,1)], {'collation':default-collation(), 'key':count#1})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[(), (1), (1,0), (1,1), (0,1), (0,0), (0,0,1)]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-006">
        <description>Apply sort function to array with string members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-24"/>
        <test>array:sort-by(["one", "two", "three", "four", "five", "fourteen"], ())</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 6</assert>
                <assert-deep-eq>["five", "four", "fourteen", "one", "three", "two"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-by-007">
        <description>Apply sort function to array - error: non-comparable types</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <test>array:sort-by(["one", "two", "three", (0), (2,3)], ())</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>    
    <test-case name="array-sort-by-008">
        <description>Apply sort function to array with string members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <test>array:sort-by(["one", "two", "three", "four", "five", "fourteen"], 
            {'key':function($x) {string-length($x), data($x)}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 6</assert>
                <assert-deep-eq>["one", "two", "five", "four", "three", "fourteen"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-by-009">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <test>array:sort-by([[2,3],[],[4,5,6,7],[6,7],[3]], {'key':array:size#1})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[[],[3],[2,3],[6,7],[4,5,6,7]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-by-010">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <test>array:sort-by([[2,3],[],[4,5,6,7],[6,7],[3]], {'key':fn:data#1})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 5</assert>
                <assert-deep-eq>[[],[2,3],[3],[4,5,6,7],[6,7]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>    
    <test-case name="array-sort-by-011">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <test>array:sort-by([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], {'key':fn:data#1})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[], [0,0], [0,0,1], [0,1], [1], [1,0], [1,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case> 
    <test-case name="array-sort-by-012">
        <description>Apply sort function to array with string members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-25"/>
        <modified by="Michael Kay" on="2016-07-26" change="add collation argument, bug 29722"/>
        <dependency type="feature" value="higherOrderFunctions"/>
        <environment ref="array"/>
        <test>array:sort-by(["the cat", "sat", "on the mat"], 
            {'collation':"http://www.w3.org/2005/xpath-functions/collation/codepoint", 
             'key': function($x) {count(tokenize($x, " "))}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 3</assert>
                <assert-deep-eq>["sat", "the cat", "on the mat"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-012a">
        <description>Apply sort function to array with string members. The use of tokenize with one argument</description>
        <created by="O'Neil Delpratt, Saxonica" on="2015-01-20"/>
        <test>array:sort-by(["the cat", "sat", "on the mat"], {'key':function($x) {count(tokenize($x))}})</test>
        <result>
            <all-of>
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 3</assert>
                <assert-deep-eq>["sat", "the cat", "on the mat"]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-013">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <test>array:sort-by([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], 
            {'key':function($emp) {fn:data(array:get($emp, 1))}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["Fred","Smith"], ["John","Smith"], ["John","Brown"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-014"  covers="fn-data">
        <description>Apply sort function to array with array members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <test>array:sort-by([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], 
            {'key': function($emp) {fn:data(array:get($emp, 2)), fn:data(array:get($emp, 1))}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["John","Brown"], ["Fred","Smith"], ["John","Smith"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-015">
        <description>Apply sort function to array with array members, sort by composite function with implicit atomization</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <test>array:sort-by([["John","Smith"], ["John","Brown"], ["Fred","Brown"], ["Fred","Smith"]], 
            {'key': function($emp) {array:get($emp, 2), array:get($emp, 1)}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 4</assert>
                <assert-deep-eq>[["Fred","Brown"], ["John","Brown"], ["Fred","Smith"], ["John","Smith"]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-016">
        <description>Apply sort function to array with array members, sort by composite function</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <test>array:sort-by([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], 
            {'key':function($x) {array:size(array:filter($x, function($y) {$y eq 1}))}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[0,0], [], [1,0], [0,1], [1], [0,0,1], [1,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-017">
        <description>Apply sort function to array with array members</description>
        <created by="Debbie Lockett, Saxonica" on="2014-11-26"/>
        <test>array:sort-by([[1,0], [1,1], [0,1], [0,0], [], [1], [0,0,1]], 
            {'key': function($x) {array:size($x), array:size(array:filter($x, function($y) {$y eq 1}))}})</test>
        <result>
            <all-of>                
                <assert-type>array(*)</assert-type>
                <assert>array:size($result) eq 7</assert>
                <assert-deep-eq>[[], [1], [0,0], [1,0], [0,1], [1,1], [0,0,1]]</assert-deep-eq>
            </all-of>
        </result>
    </test-case>    
    <test-case name="array-sort-by-018">
        <description>Sort complex nested arrays</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            array:sort-by(
             [
                [<e>a</e>, <e>b</e>],
                [(<f>a</f>, <f>b</f>)],
                [<g>a</g>, <g>b</g>],
                "A",
                ("A","B")     
             ], ()
            )

        ]]></test>
        <result>
            <all-of>
                <assert>$result?1 eq "A"</assert>
                <assert>deep-equal($result?2, ("A", "B"))</assert>
                <assert>$result?3?1 [self::e][.="a"]</assert>
                <assert>$result?3?2 [self::e][.="b"]</assert>
                <assert>$result?4?1[1] [self::f][.="a"]</assert>
                <assert>$result?4?1[2] [self::f][.="b"]</assert>
                <assert>$result?5?1 [self::g][.="a"]</assert>
                <assert>$result?5?2 [self::g][.="b"]</assert>
            </all-of>
       </result>
    </test-case>       
    <test-case name="array-sort-by-019">
        <description>Atomize a map</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test>array:sort-by([map{},1], ())</test>
        <result>
            <error code="FOTY0013"/>
        </result>
    </test-case>
    <test-case name="array-sort-by-020">
        <description>Sort mix of complex and simple</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <dependency type="spec" value="XQ40+"/>
        <dependency type="feature" value="schemaValidation"/>
        <environment ref="array"/>
        <test><![CDATA[
          array:sort-by([[3],2,validate type xs:integer { <e>1</e> }], ())
        ]]></test>
        <result>
            <all-of>                
                <assert>$result(1) eq 1</assert>
                <assert>$result(2) eq 2</assert>
                <assert>$result(3) eq 3</assert>
            </all-of>
        </result>
    </test-case>
    <test-case name="array-sort-by-021">
        <description>Sort NaN values.  Result may depend on the outcome of bug 29044</description>
        <created by="Josh Spiegel" on="2015-08-10"/>
        <test><![CDATA[
          let $a := [xs:float("NaN"), 1],     
          $b := [xs:float("NaN"), 2]
          return     
             array:sort-by([$a,$b,$a,$b], ())
        ]]></test>
        <result>
            <all-of>                
                <assert>every $x in 1 to 4 satisfies deep-equal($result?($x)?(1), xs:float("NaN"))</assert>
                <assert>$result?1?2 eq 1 and $result?2?2 eq 1</assert>
                <assert>$result?3?2 eq 2 and $result?4?2 eq 2</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-022">
        <description>Variable length sort keys</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <modified by="Gunther Rademacher" on="2025-05-20" change="add dependency"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[let
	  $employees := [
	    <emp id='1'><name><last>Cawcutt</last></name></emp>,
	    <emp id='2'><name><first>Hans</first><last>Gro&#xeb;r</last></name></emp>,
	    <emp id='3'><name><first>Domingo</first><last>De Silveira</last></name></emp>,
	    <emp id='4'><name><first>Keith</first><last>O'Brien</last></name></emp>,
	    <emp id='5'><name><first>Susan</first><last>Cawcutt</last></name></emp>,
	    <emp id='6'><name><first>Martin</first><last>Cawcutt</last></name></emp>,
	    <emp id='7'><name><first>Martin</first><first>James</first><last>Cawcutt</last></name></emp>
	    ]
	    return array:sort-by($employees, {'key':function($emp) {$emp/name/last, $emp/name/first}})?* ! number(@id)
     ]]></test>
        <result>
            <assert-deep-eq>1, 6, 7, 5, 3, 2, 4</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-023">
        <description>Sort an array of maps</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by( parse-json('[{"key":1, "value":89}, {"key":6, "value":21}, {"key":2, "value":33}]'), 
            {'key':map:get(?, "key")})?*?value</test>
        <result>
            <assert-deep-eq>89, 33, 21</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-024">
        <description>Sort an array of maps - error case</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by( parse-json('[{"key":1, "value":89}, {"key":6, "value":21}, {"key":"two", "value":33}]'), 
            {'key':map:get(?, "key")})?*?value</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-025">
        <description>Apply sort function to array - error: non-comparable types</description>
        <created by="Michael Kay" on="2017-09-18"/>
        <environment ref="array"/>
        <test>array:sort-by([xs:untypedAtomic('2015-06-12+01:00'), current-date()], ())</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>

    <test-case name="array-sort-by-026">
        <description>Apply sort function to array returned from a function</description>
        <created by="Michael Kay after Martin Honnen" on="2017-11-19"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            declare namespace serialization = "http://www.w3.org/2010/xslt-xquery-serialization";
            
            declare function local:fact($n as xs:integer) {
              if ($n eq 1)
                then 1
                else $n * local:fact($n - 1)
            };
            
            declare function local:permute($seq as item()*) as array(item()*) {
              local:permute($seq, local:fact(count($seq)), random-number-generator())
            };
            
            declare function local:permute($seq as item()*, $n as xs:integer, $rng as map(*)) as array(item()*) {
              if ($n eq 0)
                then []
                else array:append(local:permute($seq, $n - 1, $rng?next()), $rng?permute($seq))
            };
            
            let $s := ('A', 'B', 'C')
            
            return array:sort-by(local:permute($s), {'key':function($s) { $s!. }}) => array:for-each(string-join#1)
        ]]></test>
        <result>
            <assert>every $s in $result?* satisfies $s = ("ABC", "ACB", "BAC", "BCA", "CAB", "CBA")</assert>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-027">
        <description>Sort using a map to generate sort keys</description>
        <created by="Michael Kay" on="2020-06-25"/>
        <test>array:sort-by(["Monday", "Friday", "Tuesday"], {'key':map{"Monday":1, "Tuesday":2, "Wednesday":3, "Thursday":4, "Friday":5}})</test>
        <result>
            <assert-deep-eq>["Monday", "Tuesday", "Friday"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-028">
        <description>Sort using an array to generate sort keys</description>
        <created by="Michael Kay" on="2020-06-25"/>
        <test>array:sort-by(array{1 to 5}, {'key':[10, 9, 8, 7, 6]})</test>
        <result>
            <assert-deep-eq>[5, 4, 3, 2, 1]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-1">
        <description>array:sort-by#1 uses the default collation</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
         declare namespace array="http://www.w3.org/2005/xpath-functions/array";
         declare namespace map="http://www.w3.org/2005/xpath-functions/map";
         declare default collation "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive";
         array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], ())
     ]]></test>
        <result>
            <assert-deep-eq>["blUE", "green", "ORanGE", "PINK", "Red"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-2">
        <description>array:sort-by#2 uses the default collation by default</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
         declare namespace array="http://www.w3.org/2005/xpath-functions/array";
         declare namespace map="http://www.w3.org/2005/xpath-functions/map";
         declare default collation "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive";
         array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], {})
     ]]></test>
        <result>
            <assert-deep-eq>["blUE", "green", "ORanGE", "PINK", "Red"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-3">
        <description>array:sort-by#3 uses the default collation by default</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
         declare namespace array="http://www.w3.org/2005/xpath-functions/array";
         declare namespace map="http://www.w3.org/2005/xpath-functions/map";
         declare default collation "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive";
         array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], {'key':string#1})
     ]]></test>
        <result>
            <assert-deep-eq>["blUE", "green", "ORanGE", "PINK", "Red"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-4">
        <description>array:sort-by#2 with an explicit collation</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], 
            {'collation':"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"})</test>
        <result>
            <assert-deep-eq>["blUE", "green", "ORanGE", "PINK", "Red"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-5">
        <description>array:sort-by#3 with an explicit collation</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], 
            {'collation':"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive", 'key':fn:string#1})</test>
        <result>
            <assert-deep-eq>["blUE", "green", "ORanGE", "PINK", "Red"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-6">
        <description>array:sort-by#2 with explicit codepoint collation</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], 
            {'collation':"http://www.w3.org/2005/xpath-functions/collation/codepoint"})</test>
        <result>
            <assert-deep-eq>["ORanGE", "PINK", "Red", "blUE", "green"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-7">
        <description>array:sort-by#3 with explicit codepoint collation</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <test>array:sort-by(["Red", "green", "blUE", "PINK", "ORanGE"], 
            {'collation':"http://www.w3.org/2005/xpath-functions/collation/codepoint", 'key':fn:string#1})</test>
        <result>
            <assert-deep-eq>["ORanGE", "PINK", "Red", "blUE", "green"]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-collation-8">
        <description>array:sort-by#3 with explicit collation, sorting numbers</description>
        <created by="Michael Kay" on="2016-08-18"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
         declare namespace array="http://www.w3.org/2005/xpath-functions/array";
         declare default collation "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive";
         declare function local:key($n as xs:integer) as xs:string {
             ("Red", "green", "blUE", "PINK", "ORanGE")[$n]
         };
         array:sort-by([1,2,3,4,5], 
         {'collation':"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive", 'key':local:key#1})
         ]]></test>
        <result>
            <assert-deep-eq>[3, 2, 5, 4, 1]</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-100">
      <description>sort descending</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["red", "green", "blue", "pink", "orange"],
         {'order':'descending'})</test>
      <result>
         <assert-deep-eq>["red", "pink", "orange", "green", "blue"]</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-101">
      <description>sort with multiple keys</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "red", "green", "blue", "violet", "orange", "indigo"],
         ({'key': string-length#1}, {'key':identity#1}))</test>
      <result>
         <assert-deep-eq>["red", "blue", "pink", "green", "indigo", "orange", "violet"]</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-102">
      <description>sort with multiple keys</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "red", "green", "blue", "violet", "orange", "indigo"],
         ({'key': string-length#1}, {}))</test>
      <result>
         <assert-deep-eq>["red", "blue", "pink", "green", "indigo", "orange", "violet"]</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-103">
      <description>sort with multiple keys, one descending</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "red", "green", "blue", "violet", "orange", "indigo"],
         ({'key': string-length#1}, {'key': string#1, 'order':'descending'}))</test>
      <result>
         <assert-deep-eq>["red", "pink", "blue", "green", "violet", "orange", "indigo" ]</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-104">
      <description>sort with multiple keys, one descending</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "red", "green", "blue", "violet", "orange", "indigo"],
         ({'key': string-length#1, 'order':'descending'}, {'key': string#1, 'order':'ascending'}))</test>
      <result>
         <assert-deep-eq>["indigo", "orange", "violet", "green", "blue", "pink", "red"]</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-105">
      <description>sort with multiple keys, one descending, one case-blind</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "red", "redder", "RED", "green", "BLUE", "blue", "violet", "orange", "indigo"],
         ({'key': string-length#1, 'order':'descending'}, 
          {'key': string#1, 'collation':"http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"}))</test>
      <result>
         <assert-deep-eq>["indigo", "orange", "redder", "violet", "green", "BLUE", "blue", "pink", "red", "RED"]</assert-deep-eq>
      </result>
   </test-case>
    
    <test-case name="array-sort-by-106" covers-40="PR2218">
        <description>Numeric comparison</description>
        <created by="Michael Kay" on="2025-10-01"/>
        <environment ref="array"/>
        <dependency type="spec" value="XP40+ XQ40+"/>
        <test>array:sort-by([1.1, 2.1, 3.1, 4.1, 1.1e0, 2.1e0, 3.1e0, 4.1e0], {'key':fn{.}})</test>
        <result>
            <all-of>
                <assert-deep-eq>[1.1, 1.1e0, 2.1, 2.1e0, 3.1, 3.1e0, 4.1e0, 4.1]</assert-deep-eq>
                <assert>$result?(1, 3, 5, 8) instance of xs:decimal+</assert>
                <assert>$result?(2, 4, 6, 7) instance of xs:double+</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="array-sort-by-900">
      <description>Error case: non-comparable values</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", current-date()], ())</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-901">
      <description>Error case: unknown collation</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'collation': 'sdpiuuv'})</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-902">
      <description>Error case: collation not a string</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'collation': 837})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-903">
      <description>Error case: key function has wrong arity</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'key': fn:contains#2})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-904">
      <description>Error case: key function accepts wrong type of argument</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'key': fn:abs#1})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-905">
      <description>Error case: key is not a function</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'key': 23})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-906">
      <description>Error case: order is not ascending or descending</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'order': 'random'})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="array-sort-by-907">
      <description>Error case: order is not a string</description>
      <created by="Michael Kay" on="2025-05-18"/>
      <test>array:sort-by(["pink", "blue"], {'order': current-date()})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
    
</test-set>

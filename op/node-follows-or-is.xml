<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="op-node-follows-or-is">
   <description>Tests for the "follows-or-is" operator</description>
   <link type="spec"
         document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-node-follows-or-is"/>
   <test-case name="follows-or-is-1">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = () operator = follows-or-is operand2 = () </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(() follows-or-is ())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-2">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = () operator = follows-or-is operand2 = Single Operand Constructor </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(() follows-or-is <a>5000</a>)]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-3">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = () operator = follows-or-is operand2 = /works[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(() follows-or-is /works[1]/employee[1]/empnum[1])]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-4">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = () operator = follows-or-is operand2 = /staff[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(() follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-5">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = Single Operand Constructor operator = follows-or-is operand2 = () </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(<a>5000</a> follows-or-is ())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-6">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = Single Operand Constructor operator = follows-or-is operand2 = Single Operand Constructor </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>5000</a> follows-or-is <a>5000</a>]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-7">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = Single Operand Constructor operator = follows-or-is operand2 = /works[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>5000</a> follows-or-is /works[1]/employee[1]/empnum[1]]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-8">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = Single Operand Constructor operator = follows-or-is operand2 = /staff[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>5000</a> follows-or-is /staff[1]/employee[1]/empnum[1]]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-9">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /works[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = () </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(/works[1]/employee[1]/empnum[1] follows-or-is ())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-10">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /works[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = Single Operand Constructor </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/works[1]/employee[1]/empnum[1] follows-or-is <a>5000</a>]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-11">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /works[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = /works[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/works[1]/employee[1]/empnum[1] follows-or-is /works[1]/employee[1]/empnum[1]]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-12">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /works[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = /staff[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works-and-staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/works[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-13">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /staff[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = () </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is ()]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-14">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /staff[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = Single Operand Constructor </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is <a>5000</a>]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-15">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /staff[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = /works[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works-and-staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is /works[1]/employee[1]/empnum[1]]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-16">
      <description>Test of a ComparisonExpression with the operands set as follows:
         operand1 = /staff[1]/employee[1]/empnum[1] operator = follows-or-is operand2 = /staff[1]/employee[1]/empnum[1] </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-17">
      <description>Comparison of two distinct nodes in the same tree.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[2]]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="follows-or-is-18">
      <description>Comparison of two distinct nodes in the same tree.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[2] follows-or-is /staff[1]/employee[1]/empnum[1]]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-19">
      <description>Comparison of nodes across different trees.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="works-and-staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1] follows-or-is /works[1]/employee[1]/empnum[1]) and (/staff[1]/employee[1]/empnum[1] follows-or-is /works[1]/employee[2]) and (/staff[1]/employee[2] follows-or-is /works[1]/employee[1]/empnum[1]) and (/staff[1]/employee[2] follows-or-is /works[1]/employee[2])
            or 
            (/works[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]) and (/works[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[2]) and (/works[1]/employee[2] follows-or-is /staff[1]/employee[1]/empnum[1]) and (/works[1]/employee[2] follows-or-is /staff[1]/employee[2])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-20">
      <description>Test of a node expression as part of the argument to the fn not function.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:not(/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="follows-or-is-21">
      <description>Test of a node expression as part of a boolean less than or equal to (le) expression operator.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]) le (/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-22">
      <description>Test of a node expression as part of a boolean less than (lt) expression operator.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]) lt (/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="follows-or-is-23">
      <description>Test of a node expression as part of a boolean greater than or equal to (ge) expression operator.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]) ge (/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-24">
      <description>Test of a node expression as part of a boolean greater than (gt) expression operator.</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]) gt (/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="follows-or-is-25">
      <description> A node comparison where one of the operands is not the empty sequence or a single node. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:count(() follows-or-is 100)]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPTY0004"/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-26">
      <description> A node comparison where one of the operands is not the empty sequence or a single node. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[fn:count(100 follows-or-is ())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPTY0004"/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-27">
      <description> A node comparison where one of the operands is not the empty sequence or a single node. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[() follows-or-is 100]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   <test-case name="follows-or-is-28">
      <description> A node comparison where neither of the operands is the empty sequence or a single node. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[100 follows-or-is 100]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   <test-case name="follows-or-is-29">
      <description>Syntactically invalid expression</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[() follows-or-is]]></test>
      <result>
         <error code="XPTY0003"/>
      </result>
   </test-case>
   <test-case name="follows-or-is-30">
      <description>Looks like an incomplete 'follows-or-is' operator, but this is not a parse error(XPST0003), because it is a valid function call, although to a nonexistent function. 'follows-or-is' is not a reserved function name. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[follows-or-is ()]]></test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>
   <test-case name="follows-or-is-31">
      <description>Ensure node identity is is correct for variables and element constructors. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <a>5000</a>; <a>{$var}</a>/a[1] follows-or-is $var]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-32">
      <description>Ensure node identity is correct for variable references. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <a>5000</a>; $var follows-or-is $var]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="follows-or-is-33">
      <description>Ensure node identity is is correct for variables and element constructors. </description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <a>5000</a>; not($var is <a>5000</a>)]]></test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>
   <test-case name="follows-or-is-34">
      <description>Only one comparison per expression, unless parenthesized</description>
      <created by="Joel Kalvesmaki" on="2025-09-27-04:00"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1] follows-or-is /staff[1]/employee[1]/empnum[1]]]></test>
      <result>
         <error code="XPTY0003"/>
      </result>
   </test-case>
</test-set>

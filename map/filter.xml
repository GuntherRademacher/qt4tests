<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="map-filter"  covers-40="map-filter">
  <description>Tests for the map:filter function</description>
  <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-map-filter"/>
  <dependency type="spec" value="XP40+ XQ40+"/>
  <test-case name="map-filter-001">
    <description>Empty map with predicate accepting all results</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { }, function($k, $v) { true() } )]]></test>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-002">
    <description>Empty map with predicate accepting no results</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { }, function($k, $v) { false() } )]]></test>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-003">
    <description>Singleton map with predicate accepting all results</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { true() } )]]></test>
    <result>
      <assert-deep-eq>map{1:2}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-004">
    <description>Singleton map with predicate accepting no results</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { false() } )]]></test>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-005">
    <description>Singleton map with predicate checking key</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { $k = 1 } )]]></test>
    <result>
      <assert-deep-eq>map{1:2}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-006">
    <description>Singleton map with predicate checking key</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { $k = 2 } )]]></test>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-007">
    <description>Singleton map with predicate checking value</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { $v = 1 } )]]></test>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-008">
    <description>Singleton map with predicate checking value</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 1: 2 }, function($k, $v) { $v = 2 } )]]></test>
    <result>
      <assert-deep-eq>map{1:2}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-009">
    <description>Map with predicate checking key</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map:merge((1 to 10) ! map:entry(., string())), function($k, $v) { $k < 2 } ) => map:keys()]]></test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="map-filter-010">
    <description>Map with predicate checking value</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map:merge((1 to 10) ! map:entry(., string())), function($k, $v) { $v < '2' } )?* => sort()]]></test>
    <result>
      <assert-deep-eq>'1', '10'</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-011">
    <description>Map with built-in predicate function</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 'abc': 'a', 'def': 'g' }, contains#2)?*]]></test>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="map-filter-012">
    <description>Map with built-in predicate functions</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map { 'aba': 'a', 'abc': 'a', 'cba': 'a' } => map:filter(contains#2) => map:filter(starts-with#2) => map:filter(ends-with#2) => map:keys()]]></test>
    <result>
      <assert-string-value>aba</assert-string-value>
    </result>
  </test-case>
  <test-case name="map-filter-013">
    <description>Zero-arity predicate function</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <modified by="Michael Kay" on="2023-06-27" change="test is no longer in error, arity-reducing coercion applies"/>
    <test><![CDATA[map:filter(map { 'abc': 'a', 'def': 'g' }, true#0)]]></test>
    <result>
      <assert-deep-eq>map { 'abc': 'a', 'def': 'g' }</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="map-filter-014">
    <description>Invalid predicate function</description>
    <created by="Christian Gruen" on="2022-08-09"/>
    <test><![CDATA[map:filter(map { 'abc': 'a', 'def': 'g' }, substring#2)]]></test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>

    <test-case name="map-filter-410" covers-40="PR2225">
        <description>Callback function with positional argument</description>
        <created by="Christian Gruen" on="2025-10-15"/>
        <dependency type="spec" value="XQ40+ XP40+"/>
        <test>map:filter({}, fn($k, $v, $p) {})</test>
        <result>
            <assert-deep-eq>{}</assert-deep-eq>
        </result>
    </test-case>
 
    <test-case name="map-filter-411" covers-40="PR2225">
        <description>Callback function with positional argument</description>
        <created by="Christian Gruen" on="2025-10-15"/>
        <dependency type="spec" value="XQ40+ XP40+"/>
        <test>map:filter({ "a": 1, "b": 2, "c": 3 }, fn($k, $v, $p) { $p = 2 })</test>
        <result>
            <assert-deep-eq>{ "b": 2 }</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-filter-412" covers-40="PR2225">
        <description>Callback function with positional argument</description>
        <created by="Christian Gruen" on="2025-10-15"/>
        <dependency type="spec" value="XQ40+ XP40+"/>
        <test>map:filter(map:build(reverse(1 to 5)), fn($k, $v, $p) { $k = $p })</test>
        <result>
            <assert-deep-eq>{ 3: 3 }</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-filter-413" covers-40="PR2225">
        <description>Callback function with positional argument</description>
        <created by="Christian Gruen" on="2025-10-15"/>
        <dependency type="spec" value="XQ40+ XP40+"/>
        <test>map:filter(map:build(reverse(1 to 5)), fn($k, $v, $p) { $v = $p })</test>
        <result>
            <assert-deep-eq>{ 3: 3 }</assert-deep-eq>
        </result>
    </test-case>

</test-set>
